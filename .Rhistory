library(biomformat)
library(stringr)
library(ape)
library(phyloseq)
library(MicrobiomeStat)
library(ggVennDiagram)
source("../Algorithm.R")
##data preprocessing
filepath <- "../data/thai/"
folders<-list.files(path = filepath)
i=1
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
sum(tree$edge.length==0 & tree$edge[,2]<=length(tree$tip.label))
##data preprocessing
filepath <- "../data/thai/"
folders<-list.files(path = filepath)
i=1
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
library(biomformat)
library(stringr)
library(ape)
library(phyloseq)
library(MicrobiomeStat)
library(ggVennDiagram)
source("../Algorithm.R")
##data preprocessing
filepath <- "../data/thai/"
folders<-list.files(path = filepath)
i=1
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
##data preprocessing
filepath <- "../data/thai/"
folders<-list.files(path = filepath)
i=1
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
set.seed(1)
A1 = t(A)
library(dplyr)
library(patchwork)
library(vegan)
source("../Algorithm.R")
# Packages
library(ANCOMBC)
library(phyloseq)
library(qiime2R)
library(microbiome)
library(MicrobiomeStat)
library(ggplot2)
library(ggtext)
library(stringr)
# make phyloseq object
seqtab.m = readRDS("../Phyloseq_Merged/seqtab_final.RDS")
row.names(seqtab.m) = sapply(strsplit(rownames(seqtab.m), "\\."), `[`, 1)
tax.m = read.csv("tax.csv",row.names = 1)
tax.m = as.matrix(tax.m)
meta_new.m = read.table("../Phyloseq_Merged/new_meta.csv", header=TRUE, sep=",")[,-1]
rownames(meta_new.m) = meta_new.m$Sample_ID
tree.m = read_qza("../Phyloseq_Merged/rooted-tree.merged.qza")$data
miss_seq.m = meta_new.m[!meta_new.m$Sample_ID %in% rownames(seqtab.m),]
m2 = read.csv(file = '../meta2.csv')
meta_new.m$cage = as.numeric(sapply(meta_new.m$NEW_ID,function(x)m2[m2$NEW.ID..== x,8]))
meta_new.m = do.call(rbind.data.frame, lapply(rownames(seqtab.m), function(x)meta_new.m[which(meta_new.m$Sample_ID==x),]))
seqtab.m = seqtab.m[,rownames(tax.m)]
sum(sapply(1:ncol(seqtab.m),function(i)(colnames(seqtab.m)[i]!=rownames(tax.m)[i])))
sum(sapply(1:nrow(seqtab.m),function(i)(rownames(seqtab.m)[i]!=rownames(meta_new.m)[i])))
OTU.m = otu_table(t(seqtab.m),taxa_are_rows=T) # matrix
META.m = sample_data(meta_new.m) # data frame
META.m$NewPhenotype=META.m$Phenotype
META.m$NewPhenotype[META.m$NewPhenotype=="CRC"]="D"
TAX.m = tax_table(tax.m) # matrix
PHYLO2 = phy_tree(tree.m) # tree (list)
physeq_new.m = phyloseq(OTU.m, META.m, TAX.m, PHYLO2)
P200 = subset_samples(physeq_new.m, Age == 'P200')
P21 = subset_samples(physeq_new.m, Age == 'P21')
meta_c = META.m[!is.na(META.m$cage),]
meta_c = meta_c[meta_c$Age=='P200',]
WT_per = c()
cage_list = unique(meta_c$cage)
prop_CD = c()
for(cage in cage_list){
data_sub = meta_c[meta_c$cage==cage,]
prop_CD = c(prop_CD,sum(data_sub$NewPhenotype == "D")/sum(data_sub$NewPhenotype != "N"))
WT_per = c(WT_per,mean(data_sub$Genotype=="WT"))
}
data = data.frame("D_percent" = prop_CD,"WT_percent" = WT_per)
library(stats)
print(paste("Pearson correlation: ",cor.test(WT_per,prop_CD,method = "pearson")))
print(paste("Spearman correlation: ",cor.test(WT_per,prop_CD,method = "spearman")))
print(paste("Kendall correlation: ",cor.test(WT_per,prop_CD,method = "kendall")))
cor.test(WT_per,prop_CD,method = "pearson")
res = cor.test(WT_per,prop_CD,method = "pearson")
library(stats)
print(paste("Pearson correlation: ",cor.test(WT_per,prop_CD,method = "pearson")$statistic))
print(paste("Spearman correlation: ",cor.test(WT_per,prop_CD,method = "spearman")$statistic))
print(paste("Kendall correlation: ",cor.test(WT_per,prop_CD,method = "kendall")$statistic))
library(stats)
print(paste("Pearson correlation: ",cor.test(WT_per,prop_CD,method = "pearson")$statistic))
print(paste("Spearman correlation: ",cor.test(WT_per,prop_CD,method = "spearman")$statistic))
print(paste("Kendall correlation: ",cor.test(WT_per,prop_CD,method = "kendall")$statistic))
cor.test(WT_per,prop_CD,method = "spearman")
View(res)
library(stats)
print(paste("Pearson correlation: ",cor.test(WT_per,prop_CD,method = "pearson")$estimate))
print(paste("Spearman correlation: ",cor.test(WT_per,prop_CD,method = "spearman")$estimate))
print(paste("Kendall correlation: ",cor.test(WT_per,prop_CD,method = "kendall")$estimate))
knitr::opts_chunk$set(echo = TRUE)
weather = read.delim("./STCDAY.txt")
weather = weather[-c(1,12417:12427),] #remove unwanted information
library(sqldf)
library(dplyr)
library(plotly)
library(ggplot2)
# Read the data, select year month, day, AAT, ARH from the table
data <- sqldf("
SELECT year, month, day, avg_air_temp as AAT, avg_rel_hum as ARH
FROM weather
")
data$AAT = as.numeric(data$AAT)
data$ARH = as.numeric(data$ARH)
## Review NA Rows
# For AAT
rows1 = grep(TRUE, is.na(data$AAT))
slice(data, rows1)
data[rows1,]
# For ARH
rows2 = grep(TRUE, is.na(data$ARH))
slice(data, rows2)
data[rows2,]
#
data2 = data
data2$AAT[rows1] = sapply(rows1,function(x)mean(data2$AAT[!is.na(data2$AAT)&(data2$month==data2$month[x])]))
data2$ARH[rows2] = sapply(rows2,function(x)mean(data2$ARH[!is.na(data2$ARH)&(data2$month==data2$month[x])]))
heat_index = function(T,RH){
HI = -42.379 + 2.04901523*T + 10.14333127*RH - .22475541*T*RH - .00683783*T*T - .05481717*RH*RH + .00122874*T*T*RH + .00085282*T*RH*RH - .00000199*T*T*RH*RH
return(HI)
}
data2$HI = sapply(1:nrow(data2),function(x)(heat_index(data2$AAT[x],data2$ARH[x])
data2$HI = sapply(1:nrow(data2),function(x)(heat_index(data2$AAT[x],data2$ARH[x])))
View(data2)
View(data)
quantile(data2$HI,0.85)
CMI_TRH<-read.csv("CMI_TRH.csv")
View(CMI_TRH)
heat_index = function(T,RH){
HI = -42.379 + 2.04901523*T + 10.14333127*RH - .22475541*T*RH - .00683783*T*T - .05481717*RH*RH + .00122874*T*T*RH + .00085282*T*RH*RH - .00000199*T*T*RH*RH
return(HI)
}
CMI_TRH2$HI = sapply(1:nrow(CMI_TRH),function(x)(heat_index(CMI_TRH$avg_air_temp_f[x],CMI_TRH$avg_rel_hum[x])))
CMI_TRH$HI = sapply(1:nrow(CMI_TRH),function(x)(heat_index(CMI_TRH$avg_air_temp_f[x],CMI_TRH$avg_rel_hum[x])))
quantile(CMI_TRH$HI,0.85)
install.packages('weathermetrics')
CMI_TRH$HI = weathermetrics::heat.index.algorithm(CMI_TRH$avg_air_temp_f,CMI_TRH$avg_air_temp_c)
CMI_TRH$HI = weathermetrics::heat.index(t = CMI_TRH$avg_air_temp_f,rh =CMI_TRH$avg_air_temp_c)
quantile(CMI_TRH$HI,0.85)
CMI_TRH$HI = weathermetrics::heat.index(t = CMI_TRH$avg_air_temp_f,rh =CMI_TRH$avg_rel_hum)
quantile(CMI_TRH$HI,0.85)
quantile(CMI_TRH$HI,0.85)
CMI_TRH$HI = weathermetrics::heat.index(t = CMI_TRH$avg_air_temp_f,rh =CMI_TRH$avg_rel_hum)
CMI_TRH$HI = weathermetrics::heat.index(t = CMI_TRH$avg_air_temp_f,rh =CMI_TRH$avg_rel_hum)
quantile(CMI_TRH$HI,0.85)
quantile(CMI_TRH$HI,0.85)
quantile(CMI_TRH$HI,0.85)
quantile(CMI_TRH$HI,0.85)
is.na(CMI_TRH$HI)
sum(is.na(CMI_TRH$HI))
quantile(CMI_TRH$HI[!is.na(CMI_TRH)],0.85)
quantile(CMI_TRH$HI[!is.na(CMI_TRH$HI)],0.85)
data2$HI = weathermetrics::heat.index(t=data2$AAT,rh=data2$ARH)
quantile(data2$HI[!is.na(data2$HI)],0.85)
# Mean Intensity
data_summer$period<- ifelse(data_summer$year<2005,"Before","After")
knitr::opts_chunk$set(echo = TRUE)
weather = read.delim("./STCDAY.txt")
weather = weather[-c(1,12417:12427),] #remove unwanted information
library(sqldf)
library(dplyr)
library(plotly)
library(ggplot2)
# Read the data, select year month, day, AAT, ARH from the table
data <- sqldf("
SELECT year, month, day, avg_air_temp as AAT, avg_rel_hum as ARH
FROM weather
")
data$AAT = as.numeric(data$AAT)
data$ARH = as.numeric(data$ARH)
## Review NA Rows
# For AAT
rows1 = grep(TRUE, is.na(data$AAT))
slice(data, rows1)
data[rows1,]
# For ARH
rows2 = grep(TRUE, is.na(data$ARH))
slice(data, rows2)
data[rows2,]
#
data2 = data
data2$AAT[rows1] = sapply(rows1,function(x)mean(data2$AAT[!is.na(data2$AAT)&(data2$month==data2$month[x])]))
data2$ARH[rows2] = sapply(rows2,function(x)mean(data2$ARH[!is.na(data2$ARH)&(data2$month==data2$month[x])]))
# Build new data frame with no
# NAs and column AAT, ART, month, data
data_Xna <- data2 %>% mutate(
date_string = paste(year, month, day, sep="-"),
date = as.Date(date_string)
)
glimpse(data_Xna)
time_series_AAT <- plot_ly(data_Xna, type = 'scatter', mode = 'lines') %>%
add_trace(x = ~date, y = ~AAT, line = list(color = "grey")) %>%
layout(showlegend = F, title = "AAT",
yaxis = list(title="Degrees Farenheit"))
time_series_AAT
time_series_ARH <- plot_ly(data_Xna, type = 'scatter', mode = 'lines') %>%
add_trace(x = ~date, y = ~ARH, line = list(color = "grey")) %>%
layout(showlegend = F, title = "ARH",
yaxis = list(title="Percentage"))
time_series_ARH
ggplot(data = data_Xna, aes(x = date, y = AAT)) +
geom_line(color = "dark orange") +
labs(title = "AAT") +
ylab("Average Temperature (F)") +
xlab("Date")
ggplot(data = data_Xna, aes(x = date, y = ARH)) +
geom_line(color = "dark orange") +
labs(title = "ARH") +
ylab("Average Humidity (F)") +
xlab("Date")
data_summer = data_Xna[data_Xna$month == '7'|data_Xna$month == '8',] #filter the months
ggplot(data_Xna,aes(x=AAT))+geom_histogram()
ggplot(data_summer,aes(x=AAT))+geom_histogram()
qqnorm(data_summer$AAT)
qqline(data_summer$AAT)
shapiro.test(data_summer$AAT)
ks.test(data_summer$AAT,"pnorm",mean(data_summer$AAT),sd(data_summer$AAT))
library(goftest)
cvm.test(data_summer$AAT,"pnorm",mean(data_summer$AAT),sd(data_summer$AAT))
ad.test(data_summer$AAT,"pnorm",mean(data_summer$AAT),sd(data_summer$AAT))
# Mean Intensity
data_summer$period<- ifelse(data_summer$year<2005,"Before","After")
period1<-data_summer %>% filter(period =='Before')
period2<-data_summer%>% filter (period == 'After')
shapiro.test(period1$AAT)
shapiro.test(period2$AAT)
t.test(period1$AAT,period2$AAT)
CMI_TRH<-read.csv("CMI_TRH.csv")
CMI_TRH$HI = weathermetrics::heat.index(t = CMI_TRH$avg_air_temp_f,rh =CMI_TRH$avg_rel_hum)
quantile(CMI_TRH$HI[!is.na(CMI_TRH$HI)],0.85)
wilcox.test(period1$AAT,period2$AAT)
data(dietswap)
library(microbiome)
data("dietswap")
source("./Dropbox/Research/PhylogeneticMetricLearning/Normalization/code/Algorithm.R")
X = abundances(dietswap)
res = cn(X)
X = as.matrix(X)
res = cn(X)
X
View(X)
X = as.data.frame(X)
cn(X)
d = nrow(X)
v = CStat(X)
I0.1 = which(v>0.8)
X0 = X[I0.1,]
v0 = replicate(3,CStat(X0[sample(1:nrow(X0),0.5*nrow(X0)),]))
data("atlas1006")
X = abundances(atlas1006)
d = nrow(X)
> v = CStat(X)
v = CStat(X)
I0.1 = which(v>0.8)
library("devtools")
library("roxygen2")
setwd("./Desktop/")
create("normalization_package")
creat("scNorm")
create("scNorm")
create("RSimNorm")
setwd("./RSimNorm/")
document()
use_data_raw()
use_data(gut_cn)
document()
use_data(gut_cn)
use_data("../RSimNorm/data-raw/gut_cn.RData")
use_data("data-raw/gut_cn.RData")
use_data(gut_cn.RData)
source("./data-raw/gut_cn.RData")
load("./data-raw/gut_cn.RData")
gut_cn = A1
use_data(gut_cn)
devtools::install_github("BoYuan07/RSimNorm")
