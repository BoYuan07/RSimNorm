data("dietswap")
source("./Dropbox/Research/PhylogeneticMetricLearning/Normalization/code/Algorithm.R")
X = abundances(dietswap)
res = cn(X)
X = as.matrix(X)
res = cn(X)
X
View(X)
X = as.data.frame(X)
cn(X)
d = nrow(X)
v = CStat(X)
I0.1 = which(v>0.8)
X0 = X[I0.1,]
v0 = replicate(3,CStat(X0[sample(1:nrow(X0),0.5*nrow(X0)),]))
data("atlas1006")
X = abundances(atlas1006)
d = nrow(X)
> v = CStat(X)
v = CStat(X)
I0.1 = which(v>0.8)
devtools::load_all("Desktop/RSimNorm/")
devtools::load_all()
data("gut_cn")
cn(count_table = gut_cn)
devtools::load_all("Desktop/RSimNorm/")
cn(count_table = gut_cn)
devtools::load_all("Desktop/RSimNorm/")
res = cn(count_table = gut_cn)
library(biomformat)
library(stringr)
library(ape)
library(phyloseq)
library(MicrobiomeStat)
library(ggVennDiagram)
library(edgeR)
library(dada2)
library(microbiome)
##data preprocessing
filepath <- "../data/thai/"
folders<-list.files(path = filepath)
i=1
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
library(biomformat)
library(stringr)
library(ape)
library(phyloseq)
library(MicrobiomeStat)
library(ggVennDiagram)
library(edgeR)
library(dada2)
library(microbiome)
##data preprocessing
filepath <- "../data/thai/"
folders<-list.files(path = filepath)
i=1
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
filepath <- "./Dropbox/Research/PhylogeneticMetricLearning/Normalization/code/data/thai/"
folders<-list.files(path = filepath)
i=1
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
#seqtab<-as(biom_data(x), "matrix")
#seqtab<-t(seqtab)
treep<-paste(filepath,"/","insertion_tree.relabelled.tre", sep = "")
treefile = readChar(treep,file.info(treep)$size)
str_count(treefile, pattern = '; ')
treefile2 = gsub('; ','|',treefile)
tree = read.tree(text=treefile2)
nalength=is.na(tree$edge.length)
nonzerolength=tree$edge.length!=0
tree$edge.length[nalength]=sample(tree$edge.length[(!nalength)&nonzerolength], sum(nalength))
sum(tree$edge.length==0 & tree$edge[,2]<=length(tree$tip.label))
meta = read.delim(paste(filepath,"/","12080_20210508-071948.txt", sep = ""))
samplenames <- sapply(x$columns, function(y){y$id})
meta <- meta[meta$sample_name %in% samplenames,]
otu <- sapply(x$rows, function(y){y$id})
drop_tips <- tree$tip.label[!(tree$tip.label %in% otu)]
tree <- ape::drop.tip(tree,drop_tips) %>% ape::as.phylo()
P <- sapply(x$data, function(y,subsamplenames){y[subsamplenames]}, subsamplenames = meta$sample_name)
colnames(P) <- otu
P = t(P)
P = P[rowSums(P)>0,]
rownames(meta) = meta$sample_name
taxonomy = read.csv("Dropbox/Research/PhylogeneticMetricLearning/Normalization/code/data/taxonomy.csv",row.names=1)
OTU = otu_table(P,taxa_are_rows=T) # matrix
META = sample_data(meta) # data frame
PHYLO = phy_tree(tree) # tree (list)
TAXA = tax_table(as.matrix(taxonomy))
physeq = phyloseq(OTU,TAXA,META, PHYLO)
cn(physeq)
pseq = subset_samples(physeq,(ethnicity == "Karen"))
t.normalized(pseq,tax_level = "Genus",main_var = sample_group)
devtools::load_all()
devtools::load_all(path='Desktop/RSimNorm/')
t.normalized(pseq,tax_level = "Genus",main_var = sample_group)
TAX = phyloseq::tax_table(physeq)
META = phyloseq::sample_data(physeq)
OTU = phyloseq::otu_table(X.cn,taxa_are_rows = T)
devtools::load_all(path='Desktop/RSimNorm/')
t.normalized(pseq,tax_level = "Genus",main_var = sample_group)
devtools::load_all(path='Desktop/RSimNorm/')
t.normalized(pseq,tax_level = "Genus",main_var = sample_group)
View(meta)
t.normalized(pseq,tax_level = "Genus",main_var = "sample_group")
Y = meta[,'sample_group']
length(Y)
meta = phyloseq::sample_data(physeq)
Y = meta[,'sample_group']
length(Y)
Y = as.vector(Y)
length(Y)
devtools::load_all(path='Desktop/RSimNorm/')
t.normalized(pseq,tax_level = "Genus",main_var = sample_group)
t.normalized(pseq,tax_level = "Genus",main_var = "sample_group")
devtools::load_all(path='Desktop/RSimNorm/')
t.normalized(pseq,tax_level = "Genus",main_var = "sample_group")
devtools::load_all(path='Desktop/RSimNorm/')
t.normalized(pseq,tax_level = "Genus",main_var = "sample_group")
p = c(0.02,0.05,0.1)
p.adjust(p,"bonferroni")
0.05/10^10
sqrt(0.3)
p = sqrt(0.3)
p*(1-p)*2
(1-p)^2
A = matrix(c(1,2,3,4),nrow = 2)
A*c(2,4)
A
A = matrix(c(1,2,3,4,5,6),nrow = 2)
A
A*c(1,2,3)
library(dplyr)
library(patchwork)
library(vegan)
source("../Algorithm.R")
log(-0.7)
exp(-0.7)
devtools::install_github("asadharis/ATE")
devtools::install_github("asadharis/ATE")
devtools
devtools::install_github("lakerwsl/RDB")
library(biomformat)
library(stringr)
library(ape)
library(phyloseq)
library(MicrobiomeStat)
library(ggVennDiagram)
library(edgeR)
library(dada2)
library(microbiome)
library(viridis)
library(RDB)
source("../Simulation/Algorithm.R")
system.info()
sessionInfo()
install.packages("sdamr")
library(sdamr)
library(lme4)
data("anchoring")
anchoring$anchor <- factor(anchoring$anchor)
contrasts(anchoring$anchor) <- c(1/2, -1/2) # alphabetical order, so high before low
# define a lmer
mod <- lme4::lmer(everest_feet ~ anchor + (1|referrer), data=anchoring)
summary(mod)
View(mod)
mod@resp[["offset"]]
22788.3+23047.3*anchoring$anchor
fitted(mod)
# Packages
library(ANCOMBC)
library(phyloseq)
library(qiime2R)
library(microbiome)
library(MicrobiomeStat)
library(ggplot2)
library(ggtext)
library(stringr)
library(ggrepel)
# make phyloseq object
seqtab.m = readRDS("../Phyloseq_Merged/seqtab_final.RDS")
getwd()
A = matrix(c(1,2,3,4),nrow = 2)
A
sort(A)
install.packages("dtw")
library(dtw)
res = dtw(x = c(1,2,3), y = c(1,2,3,4,5))
res = dtw(x = c(1,2,3), y = c(4,5,6,6))
knitr::opts_chunk$set(echo = TRUE)
RCP8_5_raw <- read_csv("RCP8.5_raw.csv")
RCP8_5_raw <- read.csv("RCP8.5_raw.csv")
RCP8_5_raw <- read.csv("RCP8.5_raw.csv")
library(dpylr)
library(dplyr)
data <- read.csv("RCP8.5_raw.csv")
data <- data %>%
filter(model == "MPI-ESM-LR_pr" | model == "IPSL-CM5A-LR_pr" | model == "CSIRO-Mk3-6-0_pr" | model == "IPSL-CM5A-MR_pr") %>%
filter(month == 3 | month == 4 | month == 5)
library(dplyr)
data <- read.csv("RCP8.5_raw.csv")
data <- data %>%
filter(model == "MPI-ESM-LR_pr" | model == "IPSL-CM5A-LR_pr" | model == "CSIRO-Mk3-6-0_pr" | model == "IPSL-CM5A-MR_pr") %>%
filter(month == 3 | month == 4 | month == 5)$>$
library(dplyr)
data <- read.csv("RCP8.5_raw.csv")
data <- data %>%
filter(model == "MPI-ESM-LR_pr" | model == "IPSL-CM5A-LR_pr" | model == "CSIRO-Mk3-6-0_pr" | model == "IPSL-CM5A-MR_pr") %>%
filter(month == 3 | month == 4 | month == 5) %>%
mutate(model = as.factor(model))
contrasts(data$model) = contr.sum(4)
m1 = aov(precipitation ~ model, data = data)
summary(m1)
coef(m1)
m1 = lm(precipitation ~ model, data = data, contrasts = 1)
summary(m1)
View(data)
unique(data$model)
library(dplyr)
data <- read.csv("RCP8.5_raw.csv")
data <- data %>%
filter(model == "MPI-ESM-LR_pr" | model == "IPSL-CM5A-LR_pr" | model == "CSIRO-Mk3-6-0_pr" | model == "IPSL-CM5A-MR_pr") %>%
filter(month == 3 | month == 4 | month == 5) %>%
mutate(model = as.factor(model))
unique(data$model)
plot(m1)
shapiro.test(m1$residuals)
data$precipitation = data$precipitation^(1/3)
m2 = lm(precipitation ~ model, data = data, contrasts = 1)
summary(m2)
library(lmerTest)
mixed_mod1 <- lmer(precipitationt ~ 1 + (1 | model), data)
library(lmerTest)
mixed_mod1 <- lmer(precipitation ~ 1 + (1 | model), data)
summary(mixed_mod1)
library(lmer4)
mixed_mod1 <- lmer(precipitation ~ 1 + (1 | model), data)
summary(mixed_mod1)
AIC(mixed_mod1)
AIC(m2)
library(lme4)
mixed_mod1 <- lmer(precipitation ~ 1 + (1 | model), data)
summary(mixed_mod1)
library(lmerTest)
mixed_mod1 <- lmer(precipitation ~ 1 + (1 | model), data)
summary(mixed_mod1)
plot(mixed_mod1)
qqnorm(mixed_mod1)
qqnorm(residual(mixed_mod1))
qqnorm(residuals(mixed_mod1))
qqnorm(residuals(mixed_mod1))
qqline()
qqplot(residuals(mixed_mod1))
qqnorm(residuals(mixed_mod1))
qqnorm(residuals(mixed_mod1))
qqline(residuals(mixed_mod1))
null_mod = lm(precipitation ~ 1, data)
s = as.numeric(2 * (logLik(mixed_mod1) - logLik(null_mod)))
null_mod = lm(precipitation ~ 1, data)
llrts = as.numeric(2 * (logLik(mixed_mod1) - logLik(null_mod)))
lrstats <- numeric(1000)
for(i in 1:1000){
y <- unlist(simulate(null_mod))
nullsim <- lm(y ~ 1)
altsim <- suppressMessages(lmer(y ~ (1 | model), data = climate_data))
lrstats[i] <- as.numeric(2 * (logLik(altsim) - logLik(nullsim)))
}
null_mod = lm(precipitation ~ 1, data)
llrts = as.numeric(2 * (logLik(mixed_mod1) - logLik(null_mod)))
lrstats <- numeric(1000)
for(i in 1:1000){
y <- unlist(simulate(null_mod))
nullsim <- lm(y ~ 1)
altsim <- suppressMessages(lmer(y ~ (1 | model), data = data))
lrstats[i] <- as.numeric(2 * (logLik(altsim) - logLik(nullsim)))
}
mean(lrstats >= llrts)
lrts
llrts
null_mod = lm(precipitation ~ 1, data=data)
llrts = as.numeric(2 * (logLik(mixed_mod1) - logLik(null_mod)))
llrts
lrstats <- numeric(1000)
for(i in 1:1000){
y <- unlist(simulate(null_mod))
nullsim <- lm(y ~ 1)
altsim <- suppressMessages(lmer(y ~ 1+(1 | model), data = data))
lrstats[i] <- as.numeric(2 * (logLik(altsim) - logLik(nullsim)))
}
mean(lrstats >= llrts)
null_mod = lm(precipitation ~ 1, data=data)
llrts = as.numeric(2 * (logLik(mixed_mod1) - logLik(null_mod)))
set.seed(1000)
lrstats <- numeric(1000)
for(i in 1:1000){
y <- unlist(simulate(null_mod))
nullsim <- lm(y ~ 1)
altsim <- suppressMessages(lmer(y ~ 1+(1 | model), data = data))
lrstats[i] <- as.numeric(2 * (logLik(altsim) - logLik(nullsim)))
}
mean(lrstats >= llrts)
data$month = as.factor(data$month)
mixed_mod2 <- lmer(precipitationt ~ 1 + month + (1 | model), climate_data)
data$month = as.factor(data$month)
mixed_mod2 <- lmer(precipitationt ~ 1 + month + (1 | model), data)
data$month = as.factor(data$month)
mixed_mod2 <- lmer(precipitation ~ 1 + month + (1 | model), data)
summary(mixed_mod2)
library(faraway)
library(fareway)
install.packages("faraway")
library(faraway)
data(globwarm)
globwarm<-na.omit(globwarm)
m3 = lm(nhtemp ~ wusa, globwarm)
summary(m3)
m3 = lm(wusa ~ year, globwarm)
summary(m3)
stepAIC(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5)))
library(MASS)
stepAIC(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5)))
library(MASS)
stepAIC(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5),data = golbwarm))
library(MASS)
stepAIC(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5),data = globwarm))
library(MASS)
stepBIC(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5),data = globwarm))
library(MASS)
step(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5),data = globwarm),criteron = "BIC")
library(MASS)
step(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5),data = globwarm),criteron = "BIC",k=log(n))
library(MASS)
step(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5)+I(year^6),data = globwarm),criteron = )
library(MASS)
step(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5)+I(year^6),data = globwarm))
library(MASS)
stepAIC(lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5)+I(year^6),data = globwarm))
library(MASS)
model1 = lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5)+I(year^6),data = globwarm)
summary(model1)
library(MASS)
model1 = lm(wusa~year+I(year^2)+I(year^3)+I(year^4)+I(year^5)+I(year^6),data = globwarm)
stepAIC(model1)
model_s = lm(formula = wusa ~ year + I(year^2) + I(year^3) + I(year^4),
data = globwarm)
ggplot(globwarm,aes(x = year,y = wusa)) +
geom_point() +
geom_line(aes(x = year,y = model_s$fitted.values),col="red")
library(ggplot2)
model_s = lm(formula = wusa ~ year + I(year^2) + I(year^3) + I(year^4),
data = globwarm)
ggplot(globwarm,aes(x = year,y = wusa)) +
geom_point() +
geom_line(aes(x = year,y = model_s$fitted.values),col="red")
par(mfrow=c(2,2))
with(globwarm_rmna,
{plot(wusa ~ year, main = "bandwidth=1", col = "gray", cex = 0.5)
lines(ksmooth(year, wusa, "normal", 1), lwd = 2)})
par(mfrow=c(2,2))
with(globwarm,
{plot(wusa ~ year, main = "bandwidth=1", col = "gray", cex = 0.5)
lines(ksmooth(year, wusa, "normal", 1), lwd = 2)})
with(globwarm,
{plot(wusa ~ year, main = "bandwidth=5", col = "gray", cex = 0.5)
lines(ksmooth(year, wusa, "normal", 5), lwd = 2)})
with(globwarm,
{plot(wusa ~ year, main = "bandwidth=10", col = "gray", cex = 0.5)
lines(ksmooth(year, wusa, "normal", 10), lwd = 2)})
with(globwarm,
{plot(wusa ~ year, main = "bandwidth=20", col = "gray", cex = 0.5)
lines(ksmooth(year, wusa, "normal", 20), lwd = 2)})
install.packages(sm)
install.packages("sm")
library(sm)
hm = h.select(globwarm $ year, globwarm_rmna $ wusa, method = "cv")
library(sm)
hm = h.select(globwarm$year, globwarm$wusa, method = "cv")
sm.regression(globwarm$year, globwarm$wusa, h = hm, xlab = "year", ylab = "wusa")
with(globwarm_rmna,
{plot(wusa ~ year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm_rmna $ year, globwarm_rmna $ wusa), lwd = 1.5, col = "red")
})
with(globwarm,
{plot(wusa ~ year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm_rmna $ year, globwarm_rmna $ wusa), lwd = 1.5, col = "red")
})
with(globwarm,
{plot(wusa ~ year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$ year, globwarm$ wusa), lwd = 1.5, col = "red")
})
plot(wusa ~ year, main = "Smoothing Spline",col = "gray", cex = 0.5)
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
lines(loess(wusa!year,data=globwarm))
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
lines(loess(wusa!year,data=globwarm)))
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
lines(loess(wusa~year,data=globwarm)))
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
lines(loess(wusa~year,data=globwarm))
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
lines(loess(wusa~year,data=globwarm), col = "blue")
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), col = "red")
lines(loess(wusa~year,data=globwarm), col = "blue")
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
lines(loess(wusa~year,data=globwarm), col = "blue")
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
lines(loess(wusa~year,data=globwarm,span=.25), col = "blue")
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
f = loess(wusa~year,data=globwarm)
lines(year,f$fitted, col = "blue")
f = loess(wusa~year,data=globwarm)
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(smooth.spline(globwarm$year, globwarm$wusa), lwd = 1.5, col = "red")
lines(globwarm$year,f$fitted, col = "blue")
f = loess(wusa~year,data=globwarm)
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(globwarm$year,f$fitted, col = "blue")
f = loess.as(year, wusa, degree = 2, criterion = c("aicc", "gcv")[2], user.span = NULL, plot = F)
sp = h.select(globwarm$year, globwarm$wusa, method = "loess")
f = loess.as(globwarm1$year, globwarm1$wusa, degree = 2, criterion = "gcv", user.span = NULL, plot = F)
install.packages("fANCOVA")
library(fANCOVA)
f = loess.as(globwarm1$year, globwarm1$wusa, degree = 2, criterion = "gcv", user.span = NULL, plot = F)
library(fANCOVA)
f = loess.as(globwarm$year, globwarm$wusa, degree = 2, criterion = "gcv", user.span = NULL, plot = F)
plot(globwarm$wusa ~ globwarm$year, main = "Smoothing Spline",col = "gray", cex = 0.5)
lines(globwarm$year,f$fitted, col = "blue")
install.packages("gplm")
library(gplm)
par(mfrow=c(2,2))
with(globwarm_rmna,
{plot(wusa ~ year, main = "bandwidth=1", col = "gray", cex = 0.5)
lines(year, kreg(year, wusa, bandwidth = 1, kernel = "epanechnikov", grid = year) $ y, lwd = 2)})
library(gplm)
par(mfrow=c(2,2))
with(globwarm,
{plot(wusa ~ year, main = "bandwidth=1", col = "gray", cex = 0.5)
lines(year, kreg(year, wusa, bandwidth = 1, kernel = "epanechnikov", grid = year) $ y, lwd = 2)})
with(globwarm,
{plot(wusa ~ year, main = "bandwidth=5", col = "gray", cex = 0.5)
lines(year, kreg(year, wusa, bandwidth = 5, kernel = "epanechnikov", grid = year) $ y, lwd = 2)})
with(globwarm,
{plot(wusa ~ year, main = "bandwidth=10", col = "gray", cex = 0.5)
lines(year, kreg(year, wusa, bandwidth = 10, kernel = "epanechnikov", grid = year) $ y, lwd = 2)})
with(globwarm,
{plot(wusa ~ year, main = "bandwidth=20", col = "gray", cex = 0.5)
lines(year, kreg(year, wusa, bandwidth = 20, kernel = "epanechnikov", grid = year) $ y, lwd = 2)})
getwd()
setwd("Desktop/RSimNorm/")
devtools::build_rmd("vignettes/my-vignette.Rmd")
devtools::build_rmd("vignettes/RSimNorm.Rmd")
.Last.error
knitr::opts_chunk$set(message = FALSE, warning = FALSE, comment = NA,
fig.width = 6.25, fig.height = 5)
library(DT)
library(RSimNorm)
data("Karen")
# Phyloseq
pseq = Karen
getwd()
data("./data/Karen")
# Phyloseq
pseq = Karen
data("../data/Karen")
# Phyloseq
pseq = Karen
devtools::build_rmd("vignettes/my-vignette.Rmd")
devtools::build_rmd("vignettes/RSimNorm.Rmd")
devtools::build_rmd("vignettes/RSimNorm.Rmd")
devtools::build_vignettes()
library(RSimNorm)
data("Karen")
# Phyloseq
pseq = Karen
devtools::document()
data("Karen")
# Phyloseq
pseq = Karen
# Count and meta matrix
count = microbiome::abundances(pseq)
meta = data.frame(phyloseq::sample_data(pseq))
devtools::build_rmd("vignettes/RSimNorm.Rmd")
devtools::build_vignettes()
devtools::build_vignettes()
library(RSimNorm)
data("Karen")
# Phyloseq
pseq = Karen
# Count and meta matrix
count = microbiome::abundances(pseq)
meta = data.frame(phyloseq::sample_data(pseq))
library(RSimNorm)
data("Karen")
# Phyloseq
pseq = Karen
# Count and meta matrix
count = microbiome::abundances(pseq)
meta = data.frame(phyloseq::sample_data(pseq))
out1 = RSimNorm(pseq)
